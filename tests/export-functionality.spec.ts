import { test, expect } from '@playwright/test';import { createTestHelpers } from './helpers';test.describe('Export Functionality', () => {  test.beforeEach(async ({ page }) => {    await page.goto('/');  });  test('should have disabled export button initially', async ({ page }) => {    const exportButton = page.getByRole('button', { name: /Export to CSV/i });    await expect(exportButton).toBeDisabled();  });  test('should enable export button after search with results', async ({ page }) => {    const helpers = createTestHelpers(page);    const hasFilter = await helpers.addTechnologyFilter('React');    if (hasFilter) {      const searchSuccess = await helpers.performSearch();      if (searchSuccess) {        const hasResults = await helpers.hasSearchResults();        if (hasResults) {          const exportButton = page.getByRole('button', { name: /Export to CSV/i });          await expect(exportButton).toBeEnabled();        }      }    } else {      test.skip();    }  });  test('should open export dialog when export button is clicked', async ({ page }) => {    const reactButton = page.locator('button:has-text("React")').first();    if (await reactButton.isVisible()) {      await reactButton.click();      await page.waitForTimeout(2000);    }    const searchButton = page.getByRole('button', { name: /Search/i });    await expect(searchButton).toBeEnabled();    await searchButton.click();    await page.waitForTimeout(2000);    const exportButton = page.getByRole('button', { name: /Export to CSV/i });    if (await exportButton.isEnabled()) {      await exportButton.click();      await expect(page.getByRole('dialog')).toBeVisible();      await expect(page.getByRole('dialog').getByRole('heading', { name: 'Export to CSV' })).toBeVisible();    }  });  test('should show export button in search results table', async ({ page }) => {    const reactButton = page.locator('button:has-text("React")').first();    if (await reactButton.isVisible()) {      await reactButton.click();      await page.waitForTimeout(2000);    }    const searchButton = page.getByRole('button', { name: /Search/i });    await expect(searchButton).toBeEnabled();    await searchButton.click();    await page.waitForTimeout(2000);    const hasTable = await page.getByRole('table').isVisible();    if (hasTable) {      const tableExportButton = page.getByRole('button', { name: /Export All/i });      if (await tableExportButton.isVisible()) {        await expect(tableExportButton).toBeEnabled();      }    }  });  test('should show record count in export section', async ({ page }) => {    const reactButton = page.locator('button:has-text("React")').first();    if (await reactButton.isVisible()) {      await reactButton.click();      await page.waitForTimeout(2000);    }    const searchButton = page.getByRole('button', { name: /Search/i });    await expect(searchButton).toBeEnabled();    await searchButton.click();    await page.waitForTimeout(2000);    const recordsText = page.getByText(/records available/i);    if (await recordsText.isVisible()) {      await expect(recordsText).toBeVisible();    }  });  test('should handle export dialog interaction', async ({ page }) => {    const reactButton = page.locator('button:has-text("React")').first();    if (await reactButton.isVisible()) {      await reactButton.click();      await page.waitForTimeout(2000);    }    const searchButton = page.getByRole('button', { name: /Search/i });    await expect(searchButton).toBeEnabled();    await searchButton.click();    await page.waitForTimeout(2000);    const exportButton = page.getByRole('button', { name: /Export to CSV/i });    if (await exportButton.isEnabled()) {      await exportButton.click();      const dialog = page.getByRole('dialog');      await expect(dialog).toBeVisible();      const closeButton = dialog.getByRole('button', { name: /close/i }) ||                          dialog.getByRole('button', { name: /cancel/i }) ||                         page.locator('[data-testid="close-button"]');      if (await closeButton.first().isVisible()) {        await closeButton.first().click();        await expect(dialog).not.toBeVisible();      } else {        await page.keyboard.press('Escape');        await expect(dialog).not.toBeVisible();      }    }  });  test('should show export options based on search state', async ({ page }) => {    await expect(page.getByText('Download your search results')).toBeVisible();    const reactButton = page.locator('button:has-text("React")').first();    if (await reactButton.isVisible()) {      await reactButton.click();      await page.waitForTimeout(2000);    }    const exportButton = page.getByRole('button', { name: /Export to CSV/i });    await expect(exportButton).toBeDisabled();    const searchButton = page.getByRole('button', { name: /Search/i });    await searchButton.click();    await page.waitForTimeout(2000);    const hasResults = await page.getByText(/companies found/i).isVisible();    if (hasResults) {      await expect(exportButton).toBeEnabled();    }  });});