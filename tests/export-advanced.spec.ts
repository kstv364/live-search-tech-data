import { test, expect } from '@playwright/test';import { createTestHelpers } from './helpers';test.describe('Export and Download Features', () => {  test.beforeEach(async ({ page }) => {    await page.goto('/');  });  test('should show export information in dialog', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        const dialog = page.getByRole('dialog');        await expect(dialog).toBeVisible();        await expect(dialog.getByRole('heading', { name: 'Export to CSV' })).toBeVisible();        await expect(dialog.getByText('Download your search results as a CSV file')).toBeVisible();        await expect(dialog.getByText('Export Information:')).toBeVisible();        await expect(dialog.getByText('Format: CSV (comma-separated values)')).toBeVisible();        await expect(dialog.getByText('Compatible with Excel, Google Sheets, and other tools')).toBeVisible();        await expect(dialog.getByText('Includes all available company and technology data')).toBeVisible();      }    }  });  test('should handle record count selection in export dialog', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        const dialog = page.getByRole('dialog');        await expect(dialog).toBeVisible();        const recordInput = dialog.getByRole('spinbutton', { name: /Number of records to export/i });        await expect(recordInput).toBeVisible();        await expect(recordInput).toHaveValue('0');        const exportButton = dialog.getByRole('button', { name: /Export CSV/i });        await expect(exportButton).toBeDisabled();        await recordInput.fill('3');        await expect(exportButton).toBeEnabled();        await expect(dialog.getByText(/Estimated file size.*KB/)).toBeVisible();      }    }  });  test('should successfully download CSV file', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        const dialog = page.getByRole('dialog');        const recordInput = dialog.getByRole('spinbutton', { name: /Number of records to export/i });        await recordInput.fill('2');        const downloadPromise = page.waitForEvent('download');        const exportButton = dialog.getByRole('button', { name: /Export CSV/i });        await exportButton.click();        const download = await downloadPromise;        expect(download.suggestedFilename()).toMatch(/company-search-export.*\.csv/);        await expect(dialog).not.toBeVisible({ timeout: 10000 });      }    }  });  test('should validate record count input', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        const dialog = page.getByRole('dialog');        const recordInput = dialog.getByRole('spinbutton', { name: /Number of records to export/i });        const exportButton = dialog.getByRole('button', { name: /Export CSV/i });        await recordInput.fill('0');        await expect(exportButton).toBeDisabled();        await recordInput.fill('1');        await expect(exportButton).toBeEnabled();        const totalResults = await dialog.getByText(/of \d+ total/).textContent();        const maxRecords = totalResults?.match(/of (\d+) total/)?.[1];        if (maxRecords) {          const highNumber = parseInt(maxRecords) + 10;          await recordInput.fill(highNumber.toString());          await expect(exportButton).toBeEnabled();        }      }    }  });  test('should close export dialog properly', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        const dialog = page.getByRole('dialog');        await expect(dialog).toBeVisible();        const cancelButton = dialog.getByRole('button', { name: /Cancel/i });        if (await cancelButton.isVisible()) {          await cancelButton.click();          await expect(dialog).not.toBeVisible();        } else {          const closeButton = dialog.getByRole('button', { name: /Close/i });          if (await closeButton.isVisible()) {            await closeButton.click();            await expect(dialog).not.toBeVisible();          } else {            await page.keyboard.press('Escape');            await expect(dialog).not.toBeVisible();          }        }      }    }  });  test('should update file size estimation dynamically', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        const dialog = page.getByRole('dialog');        const recordInput = dialog.getByRole('spinbutton', { name: /Number of records to export/i });        await expect(dialog.getByText('Estimated file size: ~0 KB')).toBeVisible();        await recordInput.fill('2');        await expect(dialog.getByText(/Estimated file size: ~\d+ KB/)).toBeVisible();        await recordInput.fill('5');        await expect(dialog.getByText(/Estimated file size: ~\d+ KB/)).toBeVisible();      }    }  });  test('should show export button states correctly', async ({ page }) => {    const exportButton = page.getByRole('button', { name: /Export to CSV/i });    await expect(exportButton).toBeDisabled();    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await expect(exportButton).toBeDisabled();      await helpers.performSearch();      if (await helpers.hasSearchResults()) {        await expect(exportButton).toBeEnabled();        await expect(page.getByText(/\d+ records available/)).toBeVisible();      }    }  });  test('should handle export with different record counts', async ({ page }) => {    const helpers = createTestHelpers(page);    if (await helpers.addTechnologyFilter('React')) {      await helpers.performSearch();      if (await helpers.hasSearchResults() && await helpers.isExportAvailable()) {        await helpers.openExportDialog();        let dialog = page.getByRole('dialog');        let recordInput = dialog.getByRole('spinbutton', { name: /Number of records to export/i });        await recordInput.fill('1');        const downloadPromise1 = page.waitForEvent('download');        let exportButton = dialog.getByRole('button', { name: /Export CSV/i });        await exportButton.click();        const download1 = await downloadPromise1;        expect(download1.suggestedFilename()).toMatch(/company-search-export.*\.csv/);        await expect(dialog).not.toBeVisible({ timeout: 10000 });        await page.waitForTimeout(2000);        if (await helpers.isExportAvailable()) {          await helpers.openExportDialog();          dialog = page.getByRole('dialog');          recordInput = dialog.getByRole('spinbutton', { name: /Number of records to export/i });          await recordInput.fill('3');          const downloadPromise2 = page.waitForEvent('download');          exportButton = dialog.getByRole('button', { name: /Export CSV/i });          await exportButton.click();          const download2 = await downloadPromise2;          expect(download2.suggestedFilename()).toMatch(/company-search-export.*\.csv/);        }      }    }  });});